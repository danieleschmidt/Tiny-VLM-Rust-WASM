# Production Docker Compose configuration for Tiny-VLM
version: '3.8'

services:
  tiny-vlm:
    build:
      context: ../../
      dockerfile: deploy/docker/Dockerfile.production
      args:
        - BUILDKIT_INLINE_CACHE=1
    image: tiny-vlm:production
    restart: unless-stopped
    
    # Resource constraints
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      replicas: 2
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3

    # Environment variables
    environment:
      - RUST_LOG=info
      - BIND_ADDRESS=0.0.0.0:8080
      - METRICS_PORT=9090
      - RUST_BACKTRACE=1

    # Port mapping
    ports:
      - "8080:8080"  # API port
      - "9090:9090"  # Metrics port

    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Security settings
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    
    # Tmpfs mounts for temporary files
    tmpfs:
      - /tmp:size=100m,uid=65534,gid=65534,mode=1777
      - /var/tmp:size=50m,uid=65534,gid=65534,mode=1777

    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

    # Labels for monitoring and management
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tiny-vlm.rule=Host(`api.tiny-vlm.com`)"
      - "traefik.http.routers.tiny-vlm.tls.certresolver=letsencrypt"
      - "traefik.http.services.tiny-vlm.loadbalancer.server.port=8080"
      - "traefik.http.routers.tiny-vlm.middlewares=rate-limit@docker"
      - "prometheus.scrape=true"
      - "prometheus.port=9090"
      - "prometheus.path=/metrics"

  # Reverse proxy with rate limiting
  traefik:
    image: traefik:v3.0
    restart: unless-stopped
    
    command:
      - "--api.dashboard=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedByDefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@tiny-vlm.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"

    ports:
      - "80:80"
      - "443:443"

    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"

    labels:
      # Redirect to HTTPS
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      # Rate limiting middleware
      - "traefik.http.middlewares.rate-limit.ratelimit.burst=20"
      - "traefik.http.middlewares.rate-limit.ratelimit.average=60"

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'

    ports:
      - "9091:9090"

    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`metrics.tiny-vlm.com`)"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=secure_admin_password_change_me
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false

    ports:
      - "3000:3000"

    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`dashboard.tiny-vlm.com`)"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    volumes:
      - redis_data:/data

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: tiny-vlm-network
    driver: bridge